/**
 * @fileoverview Firestore Security Rules for KrishiBondhu AI application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content and profile data,
 * while allowing public read access to weather alerts and market prices.
 *
 * Data Structure:
 * - User profiles and their associated data (crops, crop issues, community posts) are nested under `/users/{userId}`.
 * - Weather alerts are stored in the top-level `/weather_alerts/{weatherAlertId}` collection.
 * - Market prices are stored in the top-level `/market_prices/{marketPriceId}` collection.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and associated subcollections.
 * - Listing other users is disallowed.
 * - Weather alerts and market prices are publicly readable but not writable by end users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure root access. All requests are denied
     * @path /
     * @allow None
     * @deny All
     * @principle Root level protection
     */
    match /{document=**} {
      allow read, write: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can get, update, or delete their profile if request.auth.uid == 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot get, update, or delete the profile with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user's crop entries.
     * @path /users/{userId}/user_crops/{userCropId}
     * @allow (create) User with ID 'user123' can create a crop entry under their profile.
     * @allow (get, update, delete) User with ID 'user123' can get, update, or delete crop entries under their profile.
     * @deny (create) User with ID 'user456' cannot create a crop entry under user 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot get, update, or delete crop entries under user 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/user_crops/{userCropId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user's reported crop issues.
     * @path /users/{userId}/crop_issues/{cropIssueId}
     * @allow (create) User with ID 'user123' can create a crop issue under their profile.
     * @allow (get, update, delete) User with ID 'user123' can get, update, or delete crop issues under their profile.
     * @deny (create) User with ID 'user456' cannot create a crop issue under user 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot get, update, or delete crop issues under user 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/crop_issues/{cropIssueId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user's community posts.
     * @path /users/{userId}/community_posts/{communityPostId}
     * @allow (create) User with ID 'user123' can create a community post under their profile.
     * @allow (get, update, delete) User with ID 'user123' can get, update, or delete community posts under their profile.
     * @deny (create) User with ID 'user456' cannot create a community post under user 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot get, update, or delete community posts under user 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/community_posts/{communityPostId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to weather alerts.
     * @path /weather_alerts/{weatherAlertId}
     * @allow (get, list) Any user can read weather alerts.
     * @deny (create, update, delete) No user can create, update, or delete weather alerts.
     */
    match /weather_alerts/{weatherAlertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to market prices.
     * @path /market_prices/{marketPriceId}
     * @allow (get, list) Any user can read market prices.
     * @deny (create, update, delete) No user can create, update, or delete market prices.
     */
    match /market_prices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}