/**
 * @fileoverview Firestore Security Rules for KrishiBondhu AI Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data while allowing public read access to weather alerts and market prices.
 *
 * Data Structure:
 * - User profiles and their related data (crops, crop issues, community posts) are nested under /users/{userId}.
 * - Weather alerts are stored in the /weather_alerts/{weatherAlertId} collection.
 * - Market prices are stored in the /market_prices/{marketPriceId} collection.
 *
 * Key Security Decisions:
 * - Users can only access their own profile and related data.
 * - Listing of user profiles is disallowed to prevent unauthorized data discovery.
 * - Weather alerts and market prices are publicly readable but not writable.
 *
 * Denormalization for Authorization:
 *  -  N/A - The data model does not currently require denormalization.  All authorization checks can be performed via path-based rules.
 *
 * Structural Segregation:
 * - Public data (weather alerts, market prices) is stored in top-level collections separate from private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user creating their own profile.
     * @allow (get, list, update, delete) Signed-in user accessing their own profile.
     * @deny (create) Signed-in user attempting to create another user's profile.
     * @deny (get, list, update, delete) Signed-in user attempting to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // isOwner() checks if the request is made by the owner, that means request.auth.uid == userId
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, update, delete: if isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to user crop documents.
     * @path /users/{userId}/user_crops/{userCropId}
     * @allow (create, get, list, update, delete) Signed-in user accessing their own crop data.
     * @deny (create, get, list, update, delete) Signed-in user attempting to access another user's crop data.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/user_crops/{userCropId} {
      allow create, get, list, update, delete: if isOwner(userId);
    }

    /**
     * @description Controls access to crop issue documents.
     * @path /users/{userId}/crop_issues/{cropIssueId}
     * @allow (create, get, list, update, delete) Signed-in user accessing their own crop issue reports.
     * @deny (create, get, list, update, delete) Signed-in user attempting to access another user's crop issue reports.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/crop_issues/{cropIssueId} {
      allow create, get, list, update, delete: if isOwner(userId);
    }

    /**
     * @description Controls access to community post documents.
     * @path /users/{userId}/community_posts/{communityPostId}
     * @allow (create, get, list, update, delete) Signed-in user accessing their own community posts.
     * @deny (create, get, list, update, delete) Signed-in user attempting to access another user's community posts.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/community_posts/{communityPostId} {
      allow create, get, list, update, delete: if isOwner(userId);
    }

    /**
     * @description Controls access to weather alert documents.
     * @path /weather_alerts/{weatherAlertId}
     * @allow (get, list) Public read access to weather alerts.
     * @deny (create, update, delete) No write access allowed.
     * @principle Allows public read access to weather alerts.
     */
    match /weather_alerts/{weatherAlertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to market price documents.
     * @path /market_prices/{marketPriceId}
     * @allow (get, list) Public read access to market prices.
     * @deny (create, update, delete) No write access allowed.
     * @principle Allows public read access to market prices.
     */
    match /market_prices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper function to determine if the request is made by the document owner.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to determine if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}