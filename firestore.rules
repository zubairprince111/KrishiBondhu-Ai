/**
 * @fileoverview Firestore Security Rules for KrishiBondhu AI application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data while allowing public read access to general information like weather alerts and market prices.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the respective user.
 * - /users/{userId}/user_crops/{userCropId}: Stores crops being farmed by a user, accessible only to that user.
 * - /users/{userId}/crop_issues/{cropIssueId}: Stores crop issues reported by a user, accessible only to that user.
 * - /users/{userId}/community_posts/{communityPostId}: Stores community posts created by a user, accessible only to that user.
 * - /weather_alerts/{weatherAlertId}: Stores weather alerts, publicly accessible.
 * - /market_prices/{marketPriceId}: Stores market prices, publicly accessible.
 *
 * Key Security Decisions:
 * - User data is strictly segregated under the /users/{userId} path.
 * - Only authenticated users can access their own data.
 * - Public read access is granted for weather alerts and market prices.
 * - Listing of user documents and subcollections is allowed only to the owner, except for `community_posts` which cannot be listed.
 *
 * Denormalization for Authorization:
 * Not required. The data is always queried in the scope of the user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @path N/A
     * @param {string} userId - The user ID to compare against.
     * @return {bool} - True if the user is signed in and the UID matches the userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and the resource exists.
     * @path N/A
     * @param {string} userId - The user ID to compare against.
     * @return {bool} - True if the user is signed in, the UID matches the userId and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document.
     * @allow (get) - User with UID 'user123' can read their own profile document.
     * @allow (update) - User with UID 'user123' can update their own profile document.
     * @allow (delete) - User with UID 'user123' can delete their own profile document.
     * @deny (create) - User with UID 'user456' cannot create a profile document for 'user123'.
     * @deny (get) - User with UID 'user456' cannot read the profile document of 'user123'.
     * @principle Enforces document ownership for writes and reads; validates relational integrity on create.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing user documents is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to user crops.
     * @path /users/{userId}/user_crops/{userCropId}
     * @allow (create) - User with UID 'user123' can create a crop document under their profile.
     * @allow (get) - User with UID 'user123' can read a crop document under their profile.
     * @allow (list) - User with UID 'user123' can list crop documents under their profile.
     * @allow (update) - User with UID 'user123' can update a crop document under their profile.
     * @allow (delete) - User with UID 'user123' can delete a crop document under their profile.
     * @deny (create) - User with UID 'user456' cannot create a crop document under 'user123's profile.
     * @deny (get) - User with UID 'user456' cannot read a crop document under 'user123's profile.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/user_crops/{userCropId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to user reported crop issues.
     * @path /users/{userId}/crop_issues/{cropIssueId}
     * @allow (create) - User with UID 'user123' can create a crop issue document under their profile.
     * @allow (get) - User with UID 'user123' can read a crop issue document under their profile.
     * @allow (list) - User with UID 'user123' can list crop issue documents under their profile.
     * @allow (update) - User with UID 'user123' can update a crop issue document under their profile.
     * @allow (delete) - User with UID 'user123' can delete a crop issue document under their profile.
     * @deny (create) - User with UID 'user456' cannot create a crop issue document under 'user123's profile.
     * @deny (get) - User with UID 'user456' cannot read a crop issue document under 'user123's profile.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/crop_issues/{cropIssueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to community posts created by the user.
     * @path /users/{userId}/community_posts/{communityPostId}
     * @allow (create) - User with UID 'user123' can create a community post document under their profile.
     * @allow (get) - User with UID 'user123' can read a community post document under their profile.
     * @allow (update) - User with UID 'user123' can update a community post document under their profile.
     * @allow (delete) - User with UID 'user123' can delete a community post document under their profile.
     * @deny (create) - User with UID 'user456' cannot create a community post document under 'user123's profile.
     * @deny (get) - User with UID 'user456' cannot read a community post document under 'user123's profile.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/community_posts/{communityPostId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing of community posts under a user is not permitted

      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to weather alerts.
     * @path /weather_alerts/{weatherAlertId}
     * @allow (get) - Any user, signed in or not, can read a weather alert document.
     * @allow (list) - Any user, signed in or not, can list weather alert documents.
     * @deny (create) - No one can create weather alerts through the client.
     * @principle Allows public read access to general information.
     */
    match /weather_alerts/{weatherAlertId} {
      allow get: if true;
      allow list: if true;

      allow create, update, delete: if false; // Only server can modify
    }

    /**
     * @description Grants public read access to market prices.
     * @path /market_prices/{marketPriceId}
     * @allow (get) - Any user, signed in or not, can read a market price document.
     * @allow (list) - Any user, signed in or not, can list market price documents.
     * @deny (create) - No one can create market prices through the client.
     * @principle Allows public read access to general information.
     */
    match /market_prices/{marketPriceId} {
      allow get: if true;
      allow list: if true;

      allow create, update, delete: if false; // Only server can modify
    }
  }
}