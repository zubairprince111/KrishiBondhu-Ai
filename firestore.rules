/**
 * @fileoverview Firestore Security Rules for KrishiBondhu AI application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content and profile data,
 * while allowing public read access to weather alerts and market prices.
 *
 * Data Structure:
 * - User profiles and their associated data (crops, crop issues, community posts) are nested under `/users/{userId}`.
 * - Weather alerts are stored in a top-level `/weather_alerts/{weatherAlertId}` collection.
 * - Market prices are stored in a top-level `/market_prices/{marketPriceId}` collection.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's authentication ID.
 * - Weather alerts and market prices are publicly readable.
 * - Listing of user subcollections is allowed only for the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to manage their own profile data.
     * @path /users/{userId}
     * @allow (create) If the user is signed in and the userId matches the authenticated user's ID.
     * @allow (get, update, delete) If the user is signed in and the userId matches the authenticated user's ID.
     * @deny (create, get, update, delete) If the user is not signed in or the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own crop data.
     * @path /users/{userId}/user_crops/{userCropId}
     * @allow (create) If the user is signed in and the userId matches the authenticated user's ID.
     * @allow (get, update, delete) If the user is signed in and the userId matches the authenticated user's ID.
     * @deny (create, get, update, delete) If the user is not signed in or the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/user_crops/{userCropId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

        /**
     * @description Allows users to manage their own crop issue reports.
     * @path /users/{userId}/crop_issues/{cropIssueId}
     * @allow (create) If the user is signed in and the userId matches the authenticated user's ID.
     * @allow (get, update, delete) If the user is signed in and the userId matches the authenticated user's ID.
     * @deny (create, get, update, delete) If the user is not signed in or the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/crop_issues/{cropIssueId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own community posts.
     * @path /users/{userId}/community_posts/{communityPostId}
     * @allow (create) If the user is signed in and the userId matches the authenticated user's ID.
     * @allow (get, update, delete) If the user is signed in and the userId matches the authenticated user's ID.
     * @deny (create, get, update, delete) If the user is not signed in or the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/community_posts/{communityPostId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to weather alerts.
     * @path /weather_alerts/{weatherAlertId}
     * @allow (get, list) Public access.
     * @deny (create, update, delete) No one is allowed to create, update, or delete weather alerts through the client.
     */
    match /weather_alerts/{weatherAlertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to market prices.
     * @path /market_prices/{marketPriceId}
     * @allow (get, list) Public access.
     * @deny (create, update, delete) No one is allowed to create, update, or delete market prices through the client.
     */
    match /market_prices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}