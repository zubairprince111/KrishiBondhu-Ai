/**
 * @fileoverview Firestore Security Rules for KrishiBondhu AI Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data
 * and allows public read access for global data like weather alerts and market prices.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the respective user.
 * - /users/{userId}/user_crops/{userCropId}: Stores user's current crops, accessible only to the user.
 * - /users/{userId}/crop_issues/{cropIssueId}: Stores user's crop issues, accessible only to the user.
 * - /users/{userId}/community_posts/{communityPostId}: Stores user's community posts, accessible only to the user.
 * - /weather_alerts/{weatherAlertId}: Stores weather alerts, publicly accessible.
 * - /market_prices/{marketPriceId}: Stores market prices, publicly accessible.
 *
 * Key Security Decisions:
 * - User data is strictly segregated and accessible only by the owning user.
 * - Global data (weather alerts, market prices) is publicly readable.
 * - Data schema is not strictly enforced to allow for rapid iteration.
 * - Listing of user documents and subcollections is allowed for owners.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the owner can read and write.
     * @path /users/{userId}
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete, get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects user crops, ensuring only the owner can read and write.
     * @path /users/{userId}/user_crops/{userCropId}
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete, get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/user_crops/{userCropId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects crop issues, ensuring only the owner can read and write.
     * @path /users/{userId}/crop_issues/{cropIssueId}
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete, get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/crop_issues/{cropIssueId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects community posts, ensuring only the owner can read and write.
     * @path /users/{userId}/community_posts/{communityPostId}
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete, get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/community_posts/{communityPostId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to weather alerts.
     * @path /weather_alerts/{weatherAlertId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read access for global data.
     */
    match /weather_alerts/{weatherAlertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to market prices.
     * @path /market_prices/{marketPriceId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read access for global data.
     */
    match /market_prices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure user lands and crops under the user profile.
     * @path /users/{userId}/lands/{landId}/crops/{cropId}
     * @allow get, list, create, update, delete: if request.auth.uid == userId
     * @principle Enforces ownership for all operations under the user profile.
     */
    match /users/{userId}/lands/{landId}/crops/{cropId} {
         allow get, list: if isOwner(userId);
         allow create: if isOwner(userId);
         allow update: if isExistingOwner(userId);
         allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}