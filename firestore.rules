/**
 * @fileoverview Firestore Security Rules for KrishiBondhu AI Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data (profiles, lands, crops, issues) while allowing public read access to community posts, weather alerts, and market prices.
 *
 * Data Structure:
 * - User data (profile, lands, crops, issues) is nested under /users/{userId}.
 * - Community posts and their comments are stored in the top-level /community_posts/{postId} and /community_posts/{postId}/comments/{commentId} collections, respectively.
 * - Weather alerts and market prices are stored in top-level collections (/weather_alerts, /market_prices).
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data, lands, crops, and issues.
 * - Community posts are publicly readable, but only the author can create, update, or delete their own posts.
 * - Comments are publicly readable, and only the author can create them. Update and delete operations are disallowed.
 * - Weather alerts and market prices are publicly readable, but writes are disallowed (assumed to be managed by trusted admin processes).
 * - Listing of user profiles is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Community posts denormalize `authorId` to enable owner-only write rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create, update, delete): Authenticated user with UID 'user123' can create/update/delete their own profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (get): Authenticated user with UID 'user123' can read their profile at /users/user123 if request.auth.uid == 'user123'.
     * @deny (create, update, delete): Authenticated user with UID 'user456' cannot create/update/delete profile at /users/user123 because request.auth.uid != 'user123'.
     * @deny (get): Authenticated user with UID 'user456' cannot read profile at /users/user123 because request.auth.uid != 'user123'.
     * @deny (list): Listing user profiles is disallowed for privacy.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures lands owned by a user, allowing only the owner to read and write.
     * @path /users/{userId}/lands/{landId}
     * @allow (create, update, delete): Authenticated user with UID 'user123' can create/update/delete land at /users/user123/lands/land1 if request.auth.uid == 'user123'.
     * @allow (get): Authenticated user with UID 'user123' can read their land at /users/user123/lands/land1 if request.auth.uid == 'user123'.
     * @deny (create, update, delete): Authenticated user with UID 'user456' cannot create/update/delete land at /users/user123/lands/land1 because request.auth.uid != 'user123'.
     * @deny (get): Authenticated user with UID 'user456' cannot read land at /users/user123/lands/land1 because request.auth.uid != 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/lands/{landId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures crops farmed by a user on a specific land, allowing only the owner to read and write.
     * @path /users/{userId}/lands/{landId}/crops/{cropId}
     * @allow (create, update, delete): Authenticated user with UID 'user123' can create/update/delete crop at /users/user123/lands/land1/crops/crop1 if request.auth.uid == 'user123'.
     * @allow (get): Authenticated user with UID 'user123' can read their crop at /users/user123/lands/land1/crops/crop1 if request.auth.uid == 'user123'.
     * @deny (create, update, delete): Authenticated user with UID 'user456' cannot create/update/delete crop at /users/user123/lands/land1/crops/crop1 because request.auth.uid != 'user123'.
     * @deny (get): Authenticated user with UID 'user456' cannot read crop at /users/user123/lands/land1/crops/crop1 because request.auth.uid != 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/lands/{landId}/crops/{cropId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures crop issues reported by users, allowing only the owner to read and write.
     * @path /users/{userId}/crop_issues/{cropIssueId}
     * @allow (create, update, delete): Authenticated user with UID 'user123' can create/update/delete issue at /users/user123/crop_issues/issue1 if request.auth.uid == 'user123'.
     * @allow (get): Authenticated user with UID 'user123' can read their issue at /users/user123/crop_issues/issue1 if request.auth.uid == 'user123'.
     * @deny (create, update, delete): Authenticated user with UID 'user456' cannot create/update/delete issue at /users/user123/crop_issues/issue1 because request.auth.uid != 'user123'.
     * @deny (get): Authenticated user with UID 'user456' cannot read issue at /users/user123/crop_issues/issue1 because request.auth.uid != 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/crop_issues/{cropIssueId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to community posts, but restricts writes to the author.
     * @path /community_posts/{postId}
     * @allow (get, list): Any authenticated user can read community posts.
     * @allow (create): Authenticated user with UID 'user123' can create a community post at /community_posts/post1 if request.resource.data.authorId == 'user123'.
     * @allow (update, delete): Authenticated user with UID 'user123' can update/delete their own post at /community_posts/post1 if resource.data.authorId == 'user123'.
     * @deny (create): Authenticated user with UID 'user456' cannot create a community post at /community_posts/post1 if request.resource.data.authorId != 'user456'.
     * @deny (update, delete): Authenticated user with UID 'user456' cannot update/delete post at /community_posts/post1 if resource.data.authorId == 'user123'.
     * @principle Allows public read access while enforcing document ownership for writes.
     */
    match /community_posts/{postId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(authorId) {
            return request.auth != null && request.auth.uid == authorId;
        }

        function isExistingOwner(authorId) {
            return isOwner(authorId) && resource != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.authorId);
        allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows public read access to comments, and restricts creation to authenticated users. Update and delete operations are disallowed.
     * @path /community_posts/{postId}/comments/{commentId}
     * @allow (get, list): Any authenticated user can read comments.
     * @allow (create): Authenticated user can create a comment.
     * @deny (update, delete): No one can update or delete a comment.
     * @principle Allows public read access while restricting writes.
     */
    match /community_posts/{postId}/comments/{commentId} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to weather alerts, but disallows writes.
     * @path /weather_alerts/{weatherAlertId}
     * @allow (get, list): Any authenticated user can read weather alerts.
     * @deny (create, update, delete): No one can create, update, or delete weather alerts.
     * @principle Allows public read access while preventing unauthorized modifications.
     */
    match /weather_alerts/{weatherAlertId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to market prices, but disallows writes.
     * @path /market_prices/{marketPriceId}
     * @allow (get, list): Any authenticated user can read market prices.
     * @deny (create, update, delete): No one can create, update, or delete market prices.
     * @principle Allows public read access while preventing unauthorized modifications.
     */
    match /market_prices/{marketPriceId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}