/**
 * @fileoverview Firestore Security Rules for KrishiBondhu AI Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data while allowing public read access to weather alerts and market prices.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId} and are only accessible to the owning user.
 * - User-generated content (crops, issues, posts) are stored as subcollections under the user's profile.
 * - Weather alerts and market prices are stored in top-level collections and are publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Write operations on user-owned data require authentication and ownership validation.
 * - Public data (weather alerts, market prices) is read-only for non-authenticated users.
 * - Data validation is minimized in this prototyping phase to allow flexible data shapes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get) User with ID 'user123' reads their profile.
     *   - request.auth.uid: 'user123'
     * @deny (update) User with ID 'user456' tries to update user 'user123's profile.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user crops.
     * @path /users/{userId}/user_crops/{userCropId}
     * @allow (create) User 'user123' creates a crop entry under their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userProfileId: 'user123'
     * @allow (get) User 'user123' reads their crop entry.
     *   - request.auth.uid: 'user123'
     * @deny (update) User 'user456' tries to update user 'user123's crop entry.
     *   - request.auth.uid: 'user456'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/user_crops/{userCropId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for crop issues.
     * @path /users/{userId}/crop_issues/{cropIssueId}
     * @allow (create) User 'user123' creates a crop issue under their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userProfileId: 'user123'
     * @allow (get) User 'user123' reads their crop issue.
     *   - request.auth.uid: 'user123'
     * @deny (update) User 'user456' tries to update user 'user123's crop issue.
     *   - request.auth.uid: 'user456'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/crop_issues/{cropIssueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for community posts.
     * @path /users/{userId}/community_posts/{communityPostId}
     * @allow (create) User 'user123' creates a community post under their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userProfileId: 'user123'
     * @allow (get) User 'user123' reads their community post.
     *   - request.auth.uid: 'user123'
     * @deny (update) User 'user456' tries to update user 'user123's community post.
     *   - request.auth.uid: 'user456'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/community_posts/{communityPostId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for weather alerts.
     * @path /weather_alerts/{weatherAlertId}
     * @allow (get) Any user can read weather alerts.
     * @deny (create) No one can create weather alerts through the client.
     * @principle Public read access with restricted writes.
     */
    match /weather_alerts/{weatherAlertId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for market prices.
     * @path /market_prices/{marketPriceId}
     * @allow (get) Any user can read market prices.
     * @deny (create) No one can create market prices through the client.
     * @principle Public read access with restricted writes.
     */
    match /market_prices/{marketPriceId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}