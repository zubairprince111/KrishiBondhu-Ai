/**
 * @fileoverview Firestore Security Rules for KrishiBondhu AI application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content
 * and provides public read access to weather alerts and market prices.
 *
 * Data Structure:
 * - User profiles and their associated data (crops, issues, posts) are nested
 *   under `/users/{userId}`.
 * - Weather alerts and market prices are stored in top-level collections
 *   (`/weather_alerts` and `/market_prices`, respectively) for public access.
 *
 * Key Security Decisions:
 * - All user-specific data is accessible only to the owning user.
 * - Weather alerts and market prices are publicly readable.
 * - Listing of all users is disallowed.
 * - Data shape validation is relaxed in this prototyping phase to allow for
 *   rapid iteration, focusing instead on authorization.
 *
 * Denormalization for Authorization:
 * Not needed. The firestore data structure follows a clear hierarchical pattern based on the user's data.
 *
 * Structural Segregation:
 * Public (weather alerts, market prices) and private (user profiles, crops,
 * issues, posts) data are stored in separate collections to simplify access
 * control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is signed in and the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is signed in, the user IDs match, and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can get their profile if request.auth.uid == 'user123'.
     * @allow (update) User with UID 'user123' can update their profile if request.auth.uid == 'user123'.
     * @allow (delete) User with UID 'user123' can delete their profile if request.auth.uid == 'user123'.
     * @deny (create) User with UID 'user456' cannot create a profile for user 'user123'.
     * @deny (get) User with UID 'user456' cannot get the profile of user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for user crops.
     * @path /users/{userId}/user_crops/{userCropId}
     * @allow (create) User with UID 'user123' can create a crop if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can get their crop if request.auth.uid == 'user123'.
     * @allow (update) User with UID 'user123' can update their crop if request.auth.uid == 'user123'.
     * @allow (delete) User with UID 'user123' can delete their crop if request.auth.uid == 'user123'.
     * @deny (create) User with UID 'user456' cannot create a crop for user 'user123'.
     * @deny (get) User with UID 'user456' cannot get the crop of user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the crop of user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the crop of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/user_crops/{userCropId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for crop issues reported by users.
     * @path /users/{userId}/crop_issues/{cropIssueId}
     * @allow (create) User with UID 'user123' can create a crop issue if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can get their crop issue if request.auth.uid == 'user123'.
     * @allow (update) User with UID 'user123' can update their crop issue if request.auth.uid == 'user123'.
     * @allow (delete) User with UID 'user123' can delete their crop issue if request.auth.uid == 'user123'.
     * @deny (create) User with UID 'user456' cannot create a crop issue for user 'user123'.
     * @deny (get) User with UID 'user456' cannot get the crop issue of user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the crop issue of user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the crop issue of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/crop_issues/{cropIssueId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for community posts created by users.
     * @path /users/{userId}/community_posts/{communityPostId}
     * @allow (create) User with UID 'user123' can create a community post if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can get their community post if request.auth.uid == 'user123'.
     * @allow (update) User with UID 'user123' can update their community post if request.auth.uid == 'user123'.
     * @allow (delete) User with UID 'user123' can delete their community post if request.auth.uid == 'user123'.
     * @deny (create) User with UID 'user456' cannot create a community post for user 'user123'.
     * @deny (get) User with UID 'user456' cannot get the community post of user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the community post of user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the community post of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/community_posts/{communityPostId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for weather alerts. Publicly accessible.
     * @path /weather_alerts/{weatherAlertId}
     * @allow (get) Any user can get a weather alert.
     * @allow (list) Any user can list weather alerts.
     * @deny (create) No user can create weather alerts (admin only).
     * @deny (update) No user can update weather alerts (admin only).
     * @deny (delete) No user can delete weather alerts (admin only).
     * @principle Public read access, restricted writes.
     */
    match /weather_alerts/{weatherAlertId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for market prices. Publicly accessible.
     * @path /market_prices/{marketPriceId}
     * @allow (get) Any user can get a market price.
     * @allow (list) Any user can list market prices.
     * @deny (create) No user can create market prices (admin only).
     * @deny (update) No user can update market prices (admin only).
     * @deny (delete) No user can delete market prices (admin only).
     * @principle Public read access, restricted writes.
     */
    match /market_prices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}